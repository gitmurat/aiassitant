"use client";

import React, { useState } from "react";
import styles from "./page.module.css";
import Chat from "./components/chat";
import { RequiredActionFunctionToolCall } from "openai/resources/beta/threads/runs/runs";
import jsPDF from "jspdf";
import getVerifiedLocation from "./utils/getLocation";

interface Coordinates {
  lat: number;
  lng: number;
}

interface SuspectDetails {
  gender?: string;
  age?: string;
  hair?: string;
  clothing?: string;
  features?: string;
}

interface CrimeReportData {
  crime_type?: string;
  datetime?: string;
  location?: string;
  coordinates?: Coordinates;
  suspect?: SuspectDetails;
  vehicle?: string;
  weapon?: string;
  evidence?: string;
}

export default function Page() {
  const [crimeReport, setCrimeReport] = useState<CrimeReportData>({});

  const [initialMessages] = useState([
    {
      role: "assistant" as const,
      content:
        "ðŸš” DetectiveGPT ready to take your statement about the incident. Please describe clearly what happened, including details about the suspect(s), vehicle(s), and any evidence.",
    },
  ]);

  console.log("ðŸŸ¨ [page.tsx] Rendered with crimeReport:", crimeReport);

  // PDF
  const downloadPDFReport = () => {
    console.log("ðŸŸ¨ [page.tsx] Generating PDF report...");
    const doc = new jsPDF();
    doc.setFontSize(18);
    doc.text("Detective GPT Crime Report", 105, 20, { align: "center" });

    doc.setFontSize(12);
    let yPosition = 35;
    const lineSpacing = 8;

    const addLine = (label: string, value: string) => {
      doc.setFont("helvetica", "bold");
      doc.text(`${label}:`, 20, yPosition);
      doc.setFont("helvetica", "normal");
      doc.text(value, 70, yPosition);
      yPosition += lineSpacing;
    };

    addLine("Crime Type", crimeReport.crime_type || "N/A");
    addLine("When", crimeReport.datetime || "N/A");
    addLine("Location", crimeReport.location || "N/A");

    if (crimeReport.coordinates) {
      addLine("Latitude", crimeReport.coordinates.lat.toString());
      addLine("Longitude", crimeReport.coordinates.lng.toString());
    }

    addLine("Vehicle", crimeReport.vehicle || "N/A");

    if (crimeReport.suspect) {
      addLine("Suspect Gender", crimeReport.suspect.gender || "N/A");
      addLine("Suspect Age", crimeReport.suspect.age || "N/A");
      addLine("Hair", crimeReport.suspect.hair || "N/A");
      addLine("Clothing", crimeReport.suspect.clothing || "N/A");
      addLine("Features", crimeReport.suspect.features || "N/A");
    }

    addLine("Weapon", crimeReport.weapon || "N/A");
    addLine("Evidence", crimeReport.evidence || "N/A");

    const generatedOn = new Date().toLocaleString();
    doc.setFontSize(8);
    doc.text(`Report generated by DetectiveGPT on ${generatedOn}`, 105, 280, { align: "center" });
    doc.save("official_crime_report.pdf");
  };

  // function call handler
  const functionCallHandler = async (call: RequiredActionFunctionToolCall) => {
    if (!call?.function?.name) {
      console.warn("ðŸŸ¨ [page.tsx] No function name in call");
      return;
    }

    console.log("ðŸŸ¨ [page.tsx] functionCallHandler invoked with call:", call);

    if (call.function.name === "update_crime_report") {
      const args = JSON.parse(call.function.arguments) as CrimeReportData;
      console.log("ðŸŸ¨ [page.tsx] update_crime_report args:", args);

      // location logic
      if (args.location) {
        console.log("ðŸŸ¨ [page.tsx] Attempting to verify location:", args.location);
        const { success, locationCandidates, singleResult, error } = await getVerifiedLocation(args.location);

        if (!success) {
          console.warn("ðŸŸ¨ [page.tsx] getVerifiedLocation => not success:", error);
        } else if (locationCandidates.length > 1) {
          console.log("ðŸŸ¨ [page.tsx] getVerifiedLocation => multiple matches, returning them...");
          return JSON.stringify({
            success: true,
            message: "Crime report updated, but multiple location matches found.",
            locationCandidates,
            updatedFields: args,
          });
        } else if (singleResult) {
          console.log("ðŸŸ¨ [page.tsx] getVerifiedLocation => single match:", singleResult);
          args.coordinates = { lat: singleResult.lat, lng: singleResult.lng };
          args.location = singleResult.formattedAddress;
        }
      }

      // merge into state
      setCrimeReport((prev) => ({ ...prev, ...args }));

      console.log("ðŸŸ¨ [page.tsx] Crime report updated. Returning success JSON...");
      return JSON.stringify({
        success: true,
        message: "Crime report updated",
        updatedFields: args,
      });
    }

    console.log("ðŸŸ¨ [page.tsx] No matching function for:", call.function.name);
    return;
  };

  return (
    <main className={styles.main}>
      <header className="header">
        <h1>ðŸš” DETECTIVE GPT READY TO ASSIST</h1>
        <p>Report crimes securely & anonymously. Your information is protected.</p>
      </header>

      <div className={styles.chatContainer}>
        <Chat functionCallHandler={functionCallHandler} initialMessages={initialMessages} />
      </div>

      <div className={styles.crimeReportContainer}>
        <h3>Crime Report Summary</h3>
        <p><strong>Type:</strong> {crimeReport.crime_type || "N/A"}</p>
        <p><strong>When:</strong> {crimeReport.datetime || "N/A"}</p>
        <p><strong>Location:</strong> {crimeReport.location || "N/A"}</p>

        {crimeReport.coordinates && (
          <>
            <p><strong>Latitude:</strong> {crimeReport.coordinates.lat}</p>
            <p><strong>Longitude:</strong> {crimeReport.coordinates.lng}</p>
          </>
        )}

        <p><strong>Vehicle:</strong> {crimeReport.vehicle || "N/A"}</p>

        {crimeReport.suspect && (
          <div>
            <strong>Suspect Details:</strong>
            <p>Gender: {crimeReport.suspect.gender || "N/A"}</p>
            <p>Age: {crimeReport.suspect.age || "N/A"}</p>
            <p>Hair: {crimeReport.suspect.hair || "N/A"}</p>
            <p>Clothing: {crimeReport.suspect.clothing || "N/A"}</p>
            <p>Features: {crimeReport.suspect.features || "N/A"}</p>
          </div>
        )}

        <p><strong>Weapon:</strong> {crimeReport.weapon || "N/A"}</p>
        <p><strong>Evidence:</strong> {crimeReport.evidence || "N/A"}</p>

        <button className="downloadButton" onClick={downloadPDFReport}>
          ðŸ“¥ Download PDF Report
        </button>
      </div>
    </main>
  );
}
